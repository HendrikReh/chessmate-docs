{"title":"Complete System Overview: From Chess Game to Natural Language Search","markdown":{"headingText":"Complete System Overview: From Chess Game to Natural Language Search","containsRefs":false,"markdown":"\nThis document explains how Chessmate ingests chess games, stores information across PostgreSQL and Qdrant, and processes natural language queries to deliver relevant results.\n\n## What is Semantic Search?\n\nBefore diving in, let's understand the concept: Traditional search matches exact keywords (like Google in the 1990s). **Semantic search** understands *meaning*. For example, if you search for \"King's Indian games,\" the system knows you're looking for games with ECO codes E60-E99, even though \"E60-E99\" never appears in your query.\n\nChessmate uses **hybrid search**: combining traditional filters (player ratings, opening codes) with **vector embeddings** (numerical representations of chess positions that capture their characteristics).\n\n---\n\n## Part 1: Ingestion - Getting Chess Games Into The System\n\n### Step 1: Parsing PGN Files (`lib/chess/pgn_parser.ml`)\n\nWhen you run `chessmate ingest game.pgn`, the system:\n\n1. **Reads the PGN file** - a chess game format with headers and moves:\n   ```\n   [Event \"World Championship\"]\n   [White \"Kasparov, Garry\"]\n   [Black \"Karpov, Anatoly\"]\n   [WhiteElo \"2800\"]\n   [BlackElo \"2750\"]\n   [Result \"1-0\"]\n   [ECO \"E97\"]\n\n   1. d4 Nf6 2. c4 g6 3. Nc3 Bg7 ...\n   ```\n\n2. **Extracts headers** → player names, ratings, event, result, ECO code\n3. **Parses moves** → converts algebraic notation (e4, Nf3) into structured data\n\n### Step 2: Generating FEN Snapshots (`lib/chess/pgn_to_fen.ml`)\n\nFor *every half-move* (ply), the system generates a **FEN string** - a text representation of the board position:\n\n```\nrnbqkbnr/pppppppp/8/8/3P4/8/PPP1PPPP/RNBQKBNR b KQkq d3 0 1\n```\n\nThis FEN captures:\n- Piece placement\n- Who moves next\n- Castling rights\n- En passant squares\n- Move counters\n\n**Why?** Each position becomes searchable independently. You can find \"French Defense endgames\" by searching positions at ply 40+, not just full games.\n\n### Step 3: Extracting Opening Information (`lib/chess/openings.ml`)\n\nThe system maintains a **catalogue** mapping opening names to ECO codes:\n\n```ocaml\nKing's Indian Defense → E60-E99\nFrench Defense → C00-C19\nSicilian Defense → B20-B99\n```\n\nIt also handles **synonyms**: \"king's indian\", \"kings indian defense\", etc. all map to the same opening.\n\n### Step 4: Storing in PostgreSQL (`lib/storage/repo_postgres.ml`)\n\nThe database schema (`scripts/migrations/0001_init.sql`):\n\n#### PostgreSQL Tables:\n\n1. **`players` table**:\n   ```sql\n   - id (auto-increment)\n   - name (e.g., \"Kasparov, Garry\")\n   - fide_id (optional)\n   - rating_peak\n   ```\n\n2. **`games` table** (one row per game):\n   ```sql\n   - id\n   - white_player_id → references players\n   - black_player_id → references players\n   - event (\"World Championship\")\n   - site, round, played_on (date)\n   - eco_code (\"E97\")\n   - opening_name (\"King's Indian Defense, Orthodox Variation\")\n   - opening_slug (\"kings_indian_defense\")  ← searchable slug\n   - result (\"1-0\", \"0-1\", \"1/2-1/2\")\n   - white_rating (2800)\n   - black_rating (2750)\n   - pgn (full PGN text)\n   ```\n   **Indexes**: On ratings, ECO codes, opening_slug for fast filtering\n\n3. **`positions` table** (dozens of rows per game):\n   ```sql\n   - id\n   - game_id → references games\n   - ply (half-move number: 1, 2, 3...)\n   - fen (\"rnbqkbnr/pppppppp/...\")\n   - san (\"e4\", \"Nf3\")\n   - move_number (full move: 1, 2, 3...)\n   - side_to_move (\"white\" or \"black\")\n   - vector_id (reference to Qdrant, initially NULL)\n   ```\n\n4. **`embedding_jobs` table** (queued work):\n   ```sql\n   - id\n   - position_id → references positions\n   - fen (the FEN string to embed)\n   - status (\"pending\" → \"in_progress\" → \"completed\"/\"failed\")\n   - attempts (retry counter)\n   - last_error\n   - timestamps (enqueued_at, started_at, completed_at)\n   ```\n\n**What happens during ingestion** (`lib/cli/ingest_command.ml:47-68`):\n1. Upsert players (avoid duplicates by name/FIDE ID)\n2. Insert game record\n3. For each move, insert position + enqueue embedding job (but aborts early if the\n   pending queue already exceeds `CHESSMATE_MAX_PENDING_EMBEDDINGS` — default 250k).\n4. Print: \"Stored game 42 with 77 positions\"\n\n> Guard rail: the CLI checks `CHESSMATE_MAX_PENDING_EMBEDDINGS` (default 250k) before inserting\n> new jobs. Raise or disable this value only when you are certain the embedding workers can keep up.\n\n---\n\n## Part 2: Embedding Pipeline - Creating Vector Representations\n\n### Step 5: The Embedding Worker (`services/embedding_worker/embedding_worker.ml`)\n\nThis is a **background service** that runs continuously (pass `--workers N` to run multiple loops in one process):\n\n```ocaml\nlet rec work_loop repo embedding_client ~poll_sleep =\n  match claim_pending_jobs repo ~limit:16 with\n  | Ok jobs -> List.iter jobs ~f:(process_job repo embedding_client)\n  | Error _ -> sleep and retry\n```\n\nEvery 2 seconds, it:\n\n1. **Atomically claims** pending jobs (limit 16) – rows transition from `pending` to `in_progress` using `FOR UPDATE SKIP LOCKED`, so multiple workers can run without duplicating work.\n2. **Calls OpenAI API** (`lib/embedding/embedding_client.ml:75-93`):\n   ```json\n   POST https://api.openai.com/v1/embeddings\n   {\n     \"model\": \"text-embedding-3-small\",\n     \"input\": [\"rnbqkbnr/pppppppp/8/8/3P4/8/PPP1PPPP/RNBQKBNR b KQkq d3 0 1\"]\n   }\n   ```\n   Returns a **1536-dimensional vector**: `[0.023, -0.451, 0.882, ...]`\n\n3. **Stores in Qdrant** (vector database) via `lib/storage/repo_qdrant.ml`:\n   ```ocaml\n   upsert_points [\n     { id: \"abc123\",  # hash of FEN\n       vector: [0.023, -0.451, ...],\n       payload: {\n         game_id: 42,\n         white_name: \"Kasparov\",\n         black_name: \"Karpov\",\n         white_elo: 2800,\n         black_elo: 2750,\n         opening_slug: \"kings_indian_defense\",\n         eco_code: \"E97\",\n         result: \"1-0\",\n         ply: 15,\n         phases: [\"middlegame\"],\n         themes: [\"king_attack\"],\n         keywords: [\"kasparov\", \"karpov\", \"kings\", \"indian\"]\n       }\n     }\n   ]\n   ```\n\n4. **Updates PostgreSQL**:\n   - Set `positions.vector_id = \"abc123\"` (links Postgres position to Qdrant vector)\n   - Mark job as completed\n\n> Need to see progress in real time? Run `scripts/embedding_metrics.sh --interval 120`\n> to print queue depth, throughput, and a back-of-the-envelope ETA while the worker runs.\n\n### What Goes Where: PostgreSQL vs Qdrant\n\n| Data Type | PostgreSQL | Qdrant |\n|-----------|-----------|--------|\n| **Player info** | ✅ Full records | ❌ Just names in payload |\n| **Game metadata** | ✅ Full records (event, date, result, ECO) | ❌ |\n| **Positions (FEN/SAN)** | ✅ Full records | ❌ |\n| **Vector embeddings** | ❌ | ✅ 1536-d vectors |\n| **Searchable payload** | ❌ | ✅ Denormalized (for filtering) |\n| **Linking** | `vector_id` → Qdrant | `game_id` → PostgreSQL |\n\n**Why two databases?**\n- **PostgreSQL**: Fast structured queries (\"games where white rating > 2700 AND eco = 'E97'\")\n- **Qdrant**: Fast semantic similarity (\"positions similar to this endgame\")\n- **Hybrid**: Combine both for powerful queries\n\n---\n\n## Part 3: Natural Language Search - From Query to Results\n\n### Step 6: Intent Analysis (`lib/query/query_intent.ml`)\n\nWhen you search: **\"Find King's Indian games where White is 2500 and Black 100 points lower\"**\n\nThe system extracts:\n\n1. **Normalize text** (line 58-65):\n   ```\n   \"find kings indian games where white is 2500 and black 100 points lower\"\n   ```\n\n2. **Extract limit** (line 85-103):\n   - Looks for patterns: \"find 5 games\", \"top 10\", \"show three\"\n   - Result: `limit = 5` (default)\n\n3. **Extract opening filters** (line 119-138):\n   - Checks opening catalogue for substring matches\n   - \"kings indian\" → matches `King's Indian Defense`\n   - Creates filters:\n     ```ocaml\n     { field = \"opening\", value = \"kings_indian_defense\" }\n     { field = \"eco_range\", value = \"E60-E99\" }\n     ```\n\n4. **Extract rating filters** (line 161-248):\n   - Parses \"white is 2500\" → `white_min = Some 2500`\n   - Parses \"100 points lower\" → `max_rating_delta = Some 100`\n   - Result:\n     ```ocaml\n     { white_min = Some 2500\n     ; black_min = None\n     ; max_rating_delta = Some 100 }\n     ```\n\n5. **Extract keywords** (line 150-159):\n   - Removes stopwords (\"find\", \"where\", \"is\", \"and\")\n   - Result: `[\"kings\", \"indian\", \"white\", \"black\", \"points\", \"lower\"]`\n\n6. **Detect phases/themes** (line 119-138):\n   - \"endgame\" → `{ field = \"phase\", value = \"endgame\" }`\n   - \"queenside majority\" → `{ field = \"theme\", value = \"queenside_majority\" }`\n\n**Output plan**:\n```ocaml\n{\n  cleaned_text: \"find kings indian games where white is 2500...\",\n  limit: 5,\n  filters: [\n    { field: \"opening\", value: \"kings_indian_defense\" },\n    { field: \"eco_range\", value: \"E60-E99\" }\n  ],\n  rating: { white_min: Some 2500, black_min: None, max_rating_delta: Some 100 },\n  keywords: [\"kings\", \"indian\", \"white\", \"black\", ...]\n}\n```\n\n---\n\n### Step 7: Hybrid Retrieval (`lib/query/hybrid_executor.ml`)\n\nNow the system fetches data from **both** databases:\n\n#### 7a. PostgreSQL Retrieval (`lib/storage/repo_postgres.ml:293-307`)\n\n```sql\nSELECT g.id, w.name, b.name, g.result, g.event, g.opening_slug,\n       g.eco_code, g.white_rating, g.black_rating\nFROM games g\nLEFT JOIN players w ON g.white_player_id = w.id\nLEFT JOIN players b ON g.black_player_id = b.id\nWHERE g.opening_slug = 'kings_indian_defense'\n  AND g.eco_code >= 'E60' AND g.eco_code <= 'E99'\n  AND g.white_rating >= 2500\n  AND g.white_rating IS NOT NULL\n  AND g.black_rating IS NOT NULL\n  AND ABS(g.white_rating - g.black_rating) <= 100\nORDER BY g.played_on DESC\nLIMIT 50;  -- Overfetch for reranking\n```\n\nReturns: **List of game summaries** (metadata only, no positions yet)\n\n#### 7b. Qdrant Vector Search (`lib/storage/repo_qdrant.ml:101-134`)\n\n1. **Build query vector** (`lib/query/hybrid_planner.ml:83-95`):\n   - Hash keywords into 8-dimensional vector (simplified version)\n   - Real system uses OpenAI embedding of the query text\n   - Result: `[0.65, 0.23, -0.41, ...]`\n\n2. **Build payload filters** (`lib/query/hybrid_planner.ml:69-76`):\n   ```json\n   {\n     \"must\": [\n       { \"key\": \"opening_slug\", \"match\": { \"value\": \"kings_indian_defense\" }},\n       { \"key\": \"white_elo\", \"range\": { \"gte\": 2500 }},\n       { \"key\": \"black_elo\", \"range\": { \"gte\": 0 }}\n     ]\n   }\n   ```\n\n3. **Search Qdrant**:\n   ```json\n   POST /collections/positions/points/search\n   {\n     \"vector\": { \"name\": \"default\", \"vector\": [0.65, 0.23, ...] },\n     \"filter\": { ... },\n     \"limit\": 100,\n     \"with_payload\": true\n   }\n   ```\n\n   Returns: **List of scored vectors**:\n   ```json\n   [\n     { \"id\": \"abc123\", \"score\": 0.92,\n       \"payload\": { \"game_id\": 42, \"white_name\": \"Kasparov\", ... }},\n     { \"id\": \"def456\", \"score\": 0.87,\n       \"payload\": { \"game_id\": 73, \"white_name\": \"Anand\", ... }},\n     ...\n   ]\n   ```\n\n---\n\n### Step 8: Combining & Reranking Results (`lib/query/hybrid_executor.ml:168-202`)\n\nNow we have:\n- **PostgreSQL results**: 50 games matching metadata filters\n- **Qdrant results**: 100 positions (with game_id) matching vector similarity\n\n**How they're combined**:\n\n1. **Index vector hits by game_id** (line 193):\n   ```ocaml\n   Map { 42 → score=0.92, 73 → score=0.87, ... }\n   ```\n\n2. **For each PostgreSQL game** (line 195-198):\n   - Look up vector hit (if any) by `game_id`\n   - Calculate **hybrid score** (line 130-134):\n\n   ```ocaml\n   let score_result plan summary vector_hit =\n     (* Vector score: from Qdrant similarity OR fallback heuristic *)\n     let vector =\n       match vector_hit with\n       | Some hit → normalize(hit.score)  # e.g., 0.92\n       | None → fallback_heuristic()       # e.g., 0.6\n     in\n\n     (* Keyword score: overlap between query keywords and game metadata *)\n     let keyword =\n       matching_keywords / total_keywords  # e.g., 4/7 = 0.57\n     in\n\n     (* Weighted combination: 70% vector + 30% keyword *)\n     let combined = (0.7 * vector) + (0.3 * keyword) in\n     (combined, vector, keyword)\n   ```\n\n   **Example**:\n   - Game #42 (Kasparov vs Karpov):\n     - Vector score: 0.92 (very similar position)\n     - Keyword score: 0.71 (5/7 keywords match)\n     - **Total: 0.857**\n\n   - Game #73 (Anand vs Carlsen):\n     - Vector score: 0.87\n     - Keyword score: 0.43\n     - **Total: 0.738**\n\n3. **Sort by total score** (line 199):\n   ```ocaml\n   List.sort ~compare:(fun a b -> Float.compare b.total_score a.total_score)\n   ```\n\n4. **Take top N** (line 201):\n   ```ocaml\n   List.take scored_results plan.limit  (* 5 games *)\n   ```\n\n---\n\n### Step 9: Formatting Results (`lib/query/result_formatter.ml`)\n\nFinal output (JSON or text):\n```json\n{\n  \"question\": \"Find King's Indian games where White is 2500 and Black 100 points lower\",\n  \"plan\": {\n    \"filters\": [\n      { \"field\": \"opening\", \"value\": \"kings_indian_defense\" },\n      { \"field\": \"eco_range\", \"value\": \"E60-E99\" }\n    ],\n    \"rating\": { \"white_min\": 2500, \"max_rating_delta\": 100 },\n    \"limit\": 5\n  },\n  \"results\": [\n    {\n      \"game_id\": 42,\n      \"white\": \"Kasparov, Garry\",\n      \"black\": \"Karpov, Anatoly\",\n      \"white_rating\": 2800,\n      \"black_rating\": 2750,\n      \"result\": \"1-0\",\n      \"event\": \"World Championship\",\n      \"opening\": \"King's Indian Defense\",\n      \"eco_code\": \"E97\",\n      \"score\": 0.857,\n      \"vector_score\": 0.92,\n      \"keyword_score\": 0.71,\n      \"synopsis\": \"Kasparov's King's Indian features aggressive pawn storms...\"\n    }\n  ]\n}\n```\n\n---\n\n## Data Flow Diagram\n\n```\n┌─────────────┐\n│  PGN File   │\n└──────┬──────┘\n       │\n       ▼\n┌─────────────────────────────┐\n│  1. Parse PGN               │\n│  2. Generate FENs (per ply) │\n│  3. Extract opening/ratings │\n└──────┬──────────────────────┘\n       │\n       ├──────────────────────────┐\n       │                          │\n       ▼                          ▼\n┌──────────────┐      ┌────────────────────┐\n│ PostgreSQL   │      │ Embedding Jobs     │\n│ - players    │      │ (queued for worker)│\n│ - games      │      └─────────┬──────────┘\n│ - positions  │                │\n└──────┬───────┘                │\n       │                        ▼\n       │              ┌──────────────────┐\n       │              │ Embedding Worker │\n       │              │ 1. Poll jobs     │\n       │              │ 2. Call OpenAI   │\n       │              │ 3. Store vectors │\n       │              └────┬─────────┬───┘\n       │                   │         │\n       │                   │         ▼\n       │                   │   ┌──────────┐\n       │                   │   │  Qdrant  │\n       │                   │   │ (vectors)│\n       │                   │   └──────────┘\n       │                   │\n       │                   ▼\n       │            (update vector_id)\n       │                   │\n       └───────────────────┘\n\n┌─────────────────────────────┐\n│  SEARCH QUERY               │\n│  \"Find King's Indian games\" │\n└──────────┬──────────────────┘\n           │\n           ▼\n┌───────────────────────────┐\n│  Query Intent Analysis    │\n│  - Extract filters        │\n│  - Parse ratings          │\n│  - Extract keywords       │\n└──────┬────────────────────┘\n       │\n       ├──────────────┬──────────────┐\n       │              │              │\n       ▼              ▼              ▼\n┌──────────┐   ┌──────────┐   ┌──────────┐\n│PostgreSQL│   │  Qdrant  │   │ Combine  │\n│ Metadata │   │  Vector  │──▶│  Results │\n│  Query   │──▶│  Search  │   │  Rerank  │\n└──────────┘   └──────────┘   └────┬─────┘\n                                   │\n                                   ▼\n                            ┌─────────────┐\n                            │ Top 5 Games │\n                            └─────────────┘\n```\n\n---\n\n## Summary: Key Takeaways\n\n1. **PostgreSQL** stores structured data (games, players, positions) - fast for exact filtering\n2. **Qdrant** stores vector embeddings - fast for semantic similarity\n3. **Hybrid search** combines both: filter by metadata, rank by similarity\n4. **Reranking** uses weighted scoring (70% vector, 30% keyword) to merge results\n5. **Every position** (not just games) is searchable - find specific board states\n6. **No LLMs in query processing** - deterministic intent parsing with opening catalogue\n\nThis architecture enables queries like \"French Defense endgames that end in a draw with queenside pawn majority\" by:\n- **Filtering**: opening=french, result=draw, phase=endgame (PostgreSQL)\n- **Similarity**: positions resembling \"queenside pawn majority\" (Qdrant vectors)\n- **Combining**: games matching both criteria, ranked by total score\n\n---\n\n## Code References\n\nKey modules implementing each stage:\n\n| Stage | Module | Key Functions |\n|-------|--------|---------------|\n| **PGN Parsing** | `lib/chess/pgn_parser.ml` | `parse`, `fold_games` |\n| **FEN Generation** | `lib/chess/pgn_to_fen.ml` | `fens_of_moves`, `apply_san` |\n| **Opening Catalogue** | `lib/chess/openings.ml` | `filters_for_text`, `slug_of_eco` |\n| **Postgres Storage** | `lib/storage/repo_postgres.ml` | `insert_game`, `search_games` |\n| **Ingestion** | `lib/cli/ingest_command.ml` | `run` |\n| **Embedding Client** | `lib/embedding/embedding_client.ml` | `embed_fens` |\n| **Embedding Worker** | `services/embedding_worker/embedding_worker.ml` | `work_loop`, `process_job` |\n| **Qdrant Storage** | `lib/storage/repo_qdrant.ml` | `upsert_points`, `vector_search` |\n| **Intent Analysis** | `lib/query/query_intent.ml` | `analyse`, `parse_rating` |\n| **Hybrid Planner** | `lib/query/hybrid_planner.ml` | `build_payload_filters`, `query_vector` |\n| **Hybrid Executor** | `lib/query/hybrid_executor.ml` | `execute`, `score_result` |\n| **Result Formatting** | `lib/query/result_formatter.ml` | Format results for CLI/API |\n\n---\n\n## Future Enhancements\n\nCurrent limitations and planned improvements:\n\n1. **Live Qdrant Integration**: Wire hybrid executor to real Qdrant queries (currently uses curated prototype data)\n2. **Reciprocal Rank Fusion (RRF)**: More sophisticated result merging algorithm\n3. **Query Embedding**: Embed user queries (not just keywords) for better semantic matching\n4. **Position Features**: Extract tactical themes (pins, forks, sacrifices) during ingestion\n5. **Caching**: Redis layer for frequently asked questions\n6. **Observability**: Structured logging + Prometheus metrics for worker/API performance\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"CHESSMATE_FOR_DUMMIES.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.8.25","theme":["cosmo","brand"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}