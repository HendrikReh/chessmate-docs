{"title":"Operations Playbook","markdown":{"headingText":"Operations Playbook","containsRefs":false,"markdown":"\n## Service Topology\n- **postgres**: canonical PGN/metadata store, embedding job queue. Volume: `data/postgres`.\n- **qdrant**: vector store for FEN embeddings, exposed on 6333/6334. Volume: `data/qdrant`.\n- **chessmate-api**: Opium HTTP service (prototype) for `/query`.\n- **embedding-worker**: OCaml worker polling `embedding_jobs`, calling OpenAI, updating Qdrant/Postgres.\n- **(optional) redis/others**: future queue/cache components once required.\n\n## Bootstrapping Environment\nCopy `.env.sample` to `.env`, adjust the values, and then export or `source` them before running commands.\n```sh\n# set connection strings for local dev\nexport DATABASE_URL=postgres://chess:chess@localhost:5433/chessmate\nexport CHESSMATE_API_URL=http://localhost:8080\n\n# start core services (first run pulls images)\ndocker compose up -d postgres qdrant\n\n# apply migrations (idempotent)\n./scripts/migrate.sh\n\n# seed sample PGNs (optional) - respects CHESSMATE_MAX_PENDING_EMBEDDINGS\nchessmate ingest test/fixtures/extended_sample_game.pgn\n```\n\n### Service Startup\n- Query API (prototype): `dune exec chessmate_api -- --port 8080`.\n- Embedding worker: `OPENAI_API_KEY=... chessmate embedding-worker --workers N` (run multiple loops inside one process; increase `N` gradually when clearing backlogs).\n- CLI queries: `chessmate query \"find king's indian games\"` (ensure API is running).\n- Queue metrics: `scripts/embedding_metrics.sh --interval 120 --log logs/embedding-metrics.log` keeps per-status counts, throughput, and ETA.\n- GPT-5 agent (optional): set `AGENT_API_KEY` (and optionally `AGENT_MODEL`, `AGENT_REASONING_EFFORT`, `AGENT_VERBOSITY`, `AGENT_CACHE_CAPACITY`) before calling `chessmate query` or starting the API to enable ranking/explanations.\n\n## Runtime Management\n- **Health checks**:\n  - API: `GET /health`.\n  - Postgres: `docker compose exec postgres pg_isready -U chess`.\n  - Qdrant: `curl http://localhost:6333/healthz`.\n- **Logs**: `docker compose logs -f <service>`; ship to Loki/ELK once observability stack is wired.\n- **Scaling**: increase `--workers` (or run additional processes) to clear job backlogs; bump concurrency one loop at a time and watch `scripts/embedding_metrics.sh` for throughput and error spikes. Postgres/Qdrant remain single-instance until HA work lands.\n- **Queue hygiene**:\n  - Ingests now enforce `CHESSMATE_MAX_PENDING_EMBEDDINGS` (default 250k). Set a higher limit or `0`/negative to bypass if you intentionally backfill.\n  - Use `scripts/prune_pending_jobs.sh <batch>` to mark pending jobs with existing vectors as completed before re-ingesting.\n\n### Embedding Queue Monitoring & Performance\n- **Continuous telemetry:**\n  ```sh\n  DATABASE_URL=postgres://chess:chess@localhost:5433/chessmate \\\n    scripts/embedding_metrics.sh --interval 120 --log logs/embedding-metrics.log\n  ```\n  Captures per-status counts, 5/15/60 minute throughput, and ETA. Store the log in source control ignored `logs/` for easy diffing.\n- **Interpreting output:**\n  - `pending` should trend down when workers keep pace; a plateau signals rate limits or stalled workers.\n  - `throughput/min` columns help decide when to scale workers or revisit OpenAI quotas.\n  - `pending ETA` is computed from the 15-minute rate—treat it as a sanity check, not an SLA.\n- **Guard tuning:**\n  - `CHESSMATE_MAX_PENDING_EMBEDDINGS=400000` is a good ceiling for local runs; production should tailor it to OpenAI/Qdrant quotas.\n  - Export the variable per shell or bake it into systemd units for ingest jobs.\n- **Scaling strategy:**\n  - Increase `--workers` gradually; if the metrics script shows rising failures (e.g., repeated 429s) roll back concurrency or raise backoff.\n  - When the queue dips below 10k pending, consider dropping back to a single worker to conserve tokens.\n\n### Bulk Ingestion Runbook\n1. **Prep** – export `DATABASE_URL`, set/confirm `CHESSMATE_MAX_PENDING_EMBEDDINGS`, and start the metrics loop (`--interval 120` works well for 5–10 worker threads).\n2. **Dry-run diagnostics** – run `chessmate twic-precheck <pgn>` or spot-check the file for encoding with the troubleshooting commands below.\n3. **Ingest** – execute `chessmate ingest <file.pgn>`; if the guard trips, either pause to let the queue drain or raise the threshold intentionally.\n4. **Embed** – keep the worker running (`dune exec embedding_worker -- --workers N --poll-sleep 1.0`) and verify completions rise faster than pending.\n5. **Prune duplicates** – after re-ingest cycles, call `scripts/prune_pending_jobs.sh <batch>` until it reports `0` to clear leftover vectorized positions.\n6. **Post-run checks** – capture the final metrics snapshot, confirm `pending` is near zero, and archive logs for observability.\n\n### Agent Operations\n- API and CLI calls automatically include agent insights when `AGENT_API_KEY` is present.\n- Monitor agent warnings returned by the API (e.g., \"Agent evaluation failed...\" or token usage summaries).\n- Tune `AGENT_REASONING_EFFORT` + `AGENT_VERBOSITY` jointly (high/high for deep audits, medium/medium for balanced responses).\n- Enable caching by setting `AGENT_CACHE_CAPACITY=<n>` (e.g. 1000) to reuse evaluations across identical queries; clear or lower the value if memory pressure appears.\n- Telemetry: each agent call logs a `[agent-telemetry]` JSON line with candidate counts, latency, token usage, and optional cost estimates. Configure per-1K token costs via `AGENT_COST_INPUT_PER_1K`, `AGENT_COST_OUTPUT_PER_1K`, and `AGENT_COST_REASONING_PER_1K` to surface USD totals.\n- If GPT-5 is unreachable, results fall back to heuristic scoring and a warning appears in the response; investigate network/API limits before re-enabling.\n\n## Backups & Restore\n- **Postgres**: schedule `pg_dump` + WAL archiving; store artifacts in secure object storage.\n- **Qdrant**: use built-in snapshots (`qdrant snapshot create --path /qdrant/storage/snapshots/<ts>`); sync to external storage.\n- **Restore workflow**: stop services → restore Postgres dump → restore Qdrant snapshot → rerun migrations (if needed) → restart worker/API → re-ingest if deltas are missing.\n\n## Security & Access\n- Terminate TLS at reverse proxy (nginx/Traefik) in front of API & Qdrant.\n- Protect Qdrant with auth (token/mTLS); rotate credentials regularly.\n- Restrict worker egress to OpenAI hosts via firewall rules.\n- Separate Postgres roles (application vs. admin) and use least privilege.\n- Rotate `OPENAI_API_KEY`, DB passwords, and tokens per incident response policy.\n\n## Monitoring & Alerting\n- Track: API latency/p95, query success rate, embedding throughput, job queue depth (via `scripts/embedding_metrics.sh` or SQL), Postgres replication lag, disk usage on `data/` volumes.\n- Alerts: latency > 2s sustained, backlog > 500 jobs, embedding failure rate > 5%/h, disk utilization > 80%, Qdrant/DB down. Hook alerts into the guard limits to warn before ingest halts.\n- Dashboard: combine Postgres exporter, Qdrant metrics, OCaml counters (future Prometheus integration), and log the metrics script output for lightweight visibility.\n\n## Incident Response\n1. Acknowledge alert/page.\n2. Check dashboards/logs for correlated spikes.\n3. If Qdrant down: return 503s quickly, pause worker.\n4. If Postgres degraded: pause ingestion, run read-only mode.\n5. Capture root cause + mitigation in `docs/INCIDENTS/<date>.md`; assign follow-up actions.\n\n## Maintenance Procedures\n- Schema changes: schedule during low traffic; return maintenance responses (503) for API.\n- Re-embedding jobs: throttle worker to stay within OpenAI quota; monitor queue depth/durations and prune completed vectors from the pending queue before re-running (`scripts/prune_pending_jobs.sh`).\n- Upgrades: bump Docker images, apply migrations, run smoke tests (`chessmate query \"test\"`), restart services.\n- Stack reset: `docker compose down`; remove `data/postgres`, `data/qdrant`; bring services back up, re-run migrations, re-ingest.\n\n## CI/CD Considerations\n- GitHub Actions (`.github/workflows/ci.yml`) runs `dune build` + `dune test` on pushes/PRs.\n- Use pull-request checks as gatekeepers before deploy.\n- For release candidates: document validation commands (`dune build`, `dune runtest`, sample ingest/query run) in PR description.\n- Future hardening: add integration suite hitting `/query` against live Postgres/Qdrant in CI/CD, automate container builds/pushes.\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"OPERATIONS.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.8.25","theme":["cosmo","brand"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}