{"title":"Developer Handbook","markdown":{"headingText":"Developer Handbook","containsRefs":false,"markdown":"\n## Onboarding Checklist\n1. Copy `.env.sample` to `.env` and update the connection strings/API keys you need locally.\n2. Install OCaml 5.1.x and `opam`; create the local switch inside the repo (lives under `_opam/`) and load it per shell with `eval $(opam env --set-switch)`.\n3. Install dependencies: `opam install . --deps-only --with-test`.\n4. Build/test baseline: `dune build`, `dune runtest`, `dune fmt --check`.\n5. Start backing services when needed: `docker compose up -d postgres qdrant` (first run downloads images).\n6. Run migrations with a fresh database: `export DATABASE_URL=postgres://chess:chess@localhost:5433/chessmate && ./scripts/migrate.sh`.\n7. Launch the prototype query API in its own shell: `dune exec chessmate_api -- --port 8080`.\n8. Ensure `psql`, Docker (with Compose), and `curl` are available on your `PATH`; set `OPENAI_API_KEY` if you intend to exercise the embedding worker and `AGENT_API_KEY` if you plan to test GPT-5 agent ranking.\n\n## Repository Layout (Top Level)\n- `lib/chess/`: PGN/FEN parsing, metadata helpers, ECO catalogue, FEN tooling.\n- `lib/storage/`, `lib/embedding/`, `lib/query/`, `lib/cli/`: persistence, embedding clients, query planner, shared CLI modules.\n- `bin/`: CLI entry points (`chessmate`).\n- `services/`: long-running executables (embedding worker, query API prototype).\n- `scripts/`: migrations/seeding helpers.\n- `docs/`: architecture, operations, developer, contribution guides.\n- `test/`: Alcotest suites + fixtures (`test/fixtures/`).\n- `data/`: Docker volumes (`data/postgres`, `data/qdrant`).\n\n## Database & Services\n```sh\n# bring services up\nexport DATABASE_URL=postgres://chess:chess@localhost:5433/chessmate\nCHESSMATE_API_URL=http://localhost:8080\n\ndocker compose up -d postgres qdrant\n./scripts/migrate.sh\n```\n- Drop/reset by removing `data/postgres` and re-running migrations (the script is idempotent).\n- Inspect data with `psql \"$DATABASE_URL\" -c 'SELECT id, opening_slug FROM games;'`.\n\n## Build & Test Workflow\n- Formatting: `dune fmt` (run before commits; CI enforces `dune fmt --check`).\n- Unit tests: `dune build && dune runtest`.\n- Watch mode: `WATCH=1 dune runtest` (re-runs changed suites).\n- Stream test output: `dune runtest --no-buffer` (useful for verbose parsers).\n- Integration passes: ensure Docker services are running, then `dune runtest --force`.\n- Before opening a PR: capture `dune build && dune runtest` output in the PR template.\n\n### CLI Usage Cheatsheet\n```sh\n# Ingest a PGN (requires DATABASE_URL). Adjust or disable the queue guard via\n# CHESSMATE_MAX_PENDING_EMBEDDINGS before bulk imports.\nchessmate ingest test/fixtures/extended_sample_game.pgn\n\n# Query prototype API (ensure server runs on localhost:8080)\nchessmate query \"Show French Defense draws with queenside majority\"\n\n# Embedding worker loop (replace OPENAI_API_KEY for real runs)\nOPENAI_API_KEY=dummy chessmate embedding-worker --workers 4 --poll-sleep 1.0\n\n# Watch queue depth & throughput every two minutes\nDATABASE_URL=postgres://chess:chess@localhost:5433/chessmate \\\n  scripts/embedding_metrics.sh --interval 120\n\n# Prune stale pending jobs after re-ingest\nDATABASE_URL=postgres://chess:chess@localhost:5433/chessmate \\\n  scripts/prune_pending_jobs.sh 2000\n\n# FEN diagnostics\nchessmate fen test/fixtures/sample_game.pgn | head -n 5\n\n# Enable GPT-5 agent ranking (optional)\nAGENT_API_KEY=test-key AGENT_REASONING_EFFORT=low AGENT_CACHE_CAPACITY=200 \\\n  chessmate query \"Explain Najdorf exchange sacrifices\"\n```\n\n### Bulk Ingestion Tips\n- Keep `CHESSMATE_MAX_PENDING_EMBEDDINGS` conservative in development (≤ 400k) so runaway queues fail fast.\n- Metrics script cadence: 60–120 seconds works well for 5–10 worker loops; shorten to 30 seconds while tuning.\n- When throughput plateaus, lower `--workers` or increase `--poll-sleep` before OpenAI throttling kicks in.\n- Always prune pending jobs with populated `vector_id`s before re-ingesting the same PGN to avoid duplicates.\n- Agent evaluations are optional; unset `AGENT_API_KEY` when running tests offline or use `AGENT_REASONING_EFFORT=low` to reduce cost/latency during development.\n\n- Keep `CHESSMATE_MAX_PENDING_EMBEDDINGS` conservative in development (≤ 400k) so runaway queues fail fast.\n- Metrics script cadence: 60–120 seconds works well for 5–10 worker loops; shorten to 30 seconds while tuning.\n- When throughput plateaus, lower `--workers` or increase `--poll-sleep` before OpenAI throttling kicks in.\n- Always prune pending jobs with populated `vector_id`s before re-ingesting the same PGN to avoid duplicates.\n\n### Parsing PGNs Programmatically\n```ocaml\n# let raw = Stdio.In_channel.read_all \"game.pgn\";;\nval raw : string = \"...\"\n# match Chessmate.Pgn_parser.parse raw with\n  | Ok game -> List.take game.moves 3\n  | Error err -> raise_s [%sexp \"parse failure\", (err : Error.t)]\n;;\n- : Chessmate.Pgn_parser.move list = [ ... ]\n\n# match Chessmate.Pgn_parser.parse_file \"game.pgn\" with\n  | Ok game -> Chessmate.Game_metadata.of_headers game.headers\n  | Error err -> raise_s [%sexp \"parse-file failure\", (err : Error.t)]\n;;\n- : Chessmate.Game_metadata.t = { ... }\n```\n\n## Coding Standards\n- Adopt `open! Base`; expose only required signatures via `.mli`.\n- Keep pure logic under `lib/chess`; place side-effects (database, network) in `lib/storage` or service modules.\n- Prefer pattern matching, avoid partial functions, return `Or_error.t` for recoverable failures.\n- Avoid ad-hoc `printf` in long-lived services—use logging macros once wired in.\n\n## Git Workflow\n1. `git checkout -b feature/<descriptor>`.\n2. Keep commits focused/imperative (e.g., `feat: add opening catalogue`).\n3. Rebase on `main` before pushing; resolve conflicts locally.\n4. Open PR with summary, test evidence, rollout notes; request review.\n\n## IDE & Tooling Tips\n- Source the opam switch in new shells: `eval $(opam env --set-switch)`.\n- Recommended: VS Code + OCaml Platform, or Emacs + merlin; enable ocamlformat-on-save.\n- Optional Git hooks under `scripts/` can enforce formatting/tests pre-push.\n\n## Troubleshooting\n- Connection errors to Postgres: ensure `docker compose ps` shows containers healthy; confirm `DATABASE_URL`.\n- Embedding rate limits: mock `Embedding_client` or throttle job polling; capture fixtures for deterministic tests.\n- Qdrant schema mismatches: rerun migrations or wipe `data/qdrant` if working with disposable dev data.\n- CLI query returning curated results only: API is still prototype—planner stubs curated data until Qdrant/Postgres integration lands.\n\n## Continuous Integration\n- GitHub Actions workflow [`ci.yml`](../.github/workflows/ci.yml) runs on pushes/PRs (build + tests).\n- No remote caching: expect full builds; keep dependencies minimal.\n- Re-run CI from GitHub Actions tab after rebases/flaky failures; log flakes in an issue.\n- Local dry-run (optional): `HOME=$PWD act -j build-and-test -P ubuntu-latest=ghcr.io/catthehacker/ubuntu:act-latest --container-architecture linux/amd64` (some GitHub services unavailable locally).\n\n## Related Documentation\n\n- [Chessmate for Dummies](CHESSMATE_FOR_DUMMIES.md) - Complete ingestion and search flow explanation\n- [Architecture](ARCHITECTURE.md) - System design, components, and data flow diagrams\n- [Operations](OPERATIONS.md) - Deployment, monitoring, and backup procedures\n- [LLM Prompts](PROMPTS.md) - Useful prompts for chess analysis and data augmentation\n- [Troubleshooting](TROUBLESHOOTING.md) - Common issues and solutions\n- [Guidelines](GUIDELINES.md) - Collaboration standards and PR checklist\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"DEVELOPER.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.8.25","theme":["cosmo","brand"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}