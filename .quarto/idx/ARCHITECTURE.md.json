{"title":"Architecture Overview","markdown":{"headingText":"Architecture Overview","containsRefs":false,"markdown":"\n## System Goals\n- Answer natural-language chess questions by combining structured metadata with vector similarity.\n- Self-host PostgreSQL + Qdrant; rely on OpenAI only for embedding generation.\n- Offer OCaml CLIs and HTTP services to support ingestion and retrieval workflows.\n\n## Visual Overview\n```mermaid\nflowchart TD\n  subgraph Clients\n    CLI[\"CLI (chessmate)\"]\n  end\n\n  subgraph Services\n    API[\"Query API (Opium)\"]\n    Worker[\"Embedding Worker\"]\n  end\n\n  subgraph Storage\n    PG[(\"PostgreSQL\")]\n    QD[(\"Qdrant\")]\n  end\n\n  subgraph Integrations\n    OpenAI[(\"OpenAI Embeddings\")]\n  end\n\n  CLI -->|\"HTTP /query\"| API\n  CLI -->|\"Ingest PGN\"| PG\n  API -->|\"Metadata lookups\"| PG\n  API -->|\"Vector search\"| QD\n  Worker -->|\"Embedding jobs\"| PG\n  Worker -->|\"Vectors\"| QD\n  Worker -->|\"Embed FENs\"| OpenAI\n  PG -->|\"Opening metadata\"| CLI\n```\n\n## Component Overview\n- **CLI & API Layer**: `chessmate ingest` / `chessmate query` commands and the Opium-based `/query` service route user intent into the platform.\n- **Ingestion pipeline** (`lib/chess/pgn_parser`, `lib/storage/repo_postgres`): parses PGNs, derives FEN snapshots, extracts ECO/opening metadata, persists games/positions/embedding jobs in Postgres, and now enforces a configurable guard to pause ingestion when the embedding queue is saturated.\n- **Embedding pipeline** (`services/embedding_worker`): polls `embedding_jobs`, batches FEN strings, calls OpenAI embeddings, writes vectors to Qdrant, and records `vector_id` back in Postgres. Operators track throughput with `scripts/embedding_metrics.sh` while scaling workers via the `--workers` flag and rely on `CHESSMATE_MAX_PENDING_EMBEDDINGS` to keep ingest pressure in check.\n- **Hybrid query pipeline** (`lib/query`, `lib/chess/openings`): converts natural-language questions into structured filters (openings/ratings/phases), plans hybrid metadata/vector lookups, and assembles responses.\n\n## Data Flow\n```mermaid\ngraph LR\n  A[PGN File] -->|Parse headers/SAN/FEN| B[Ingestion Pipeline]\n  B -->|Persist players/games/positions| C[(PostgreSQL)]\n  B -->|Enqueue FEN jobs| D[embedding_jobs]\n  E[Embedding Worker] -->|Poll jobs| D\n  E -->|Call embeddings| F[(OpenAI API)]\n  E -->|Upsert vectors| G[(Qdrant)]\n  E -->|Update vector_id| C\n  H[Query CLI/API] -->|Natural language question| I[Query Intent]\n  I -->|Opening/rating filters| J[Planner]\n  J -->|Metadata lookup| C\n  J -->|Vector lookup| G\n  J -->|Formatted response| H\n```\n\nDetailed steps:\n1. **Ingest**: PGN file → parse headers/SAN/FEN → extract player, result, ECO/opening slug → persist to Postgres (`games`, `players`, `positions`) → enqueue `embedding_jobs` for each FEN, with a guard on queue depth (`CHESSMATE_MAX_PENDING_EMBEDDINGS`) to keep backlog manageable.\n2. **Embed**: Worker polls pending jobs → batches FENs → calls OpenAI embeddings → upserts into Qdrant (vector + payload) → updates Postgres `positions.vector_id` and job status.\n3. **Query**: CLI/API receives question → `Query_intent.analyse` normalizes text, maps openings via ECO catalogue, infers rating/phase filters → prototype planner scores curated vector/keyword results (future: live Postgres + Qdrant queries) → aggregates response via `Result_formatter`.\n\n## Storage Design\n- **PostgreSQL**: `games` (players, ECO, opening_slug), `positions` (ply, fen, san, vector_id), `embedding_jobs`, `annotations`. Additional indexes on ratings, ECO, opening slug, and vector_id accelerate filtering.\n- **Qdrant**: `positions` collection holding dense FEN embeddings and payload fields (player names, ECO range, move metadata) to support hybrid queries.\n- **Volumes**: `data/postgres` and `data/qdrant` mount persistent storage under Docker Compose for reproducible local environments.\n\n## Module Boundaries\n- `lib/chess`: PGN/FEN parsing, ECO/opening catalogue, domain metadata models.\n- `lib/storage`: Postgres primitives (`Repo_postgres`), embedding queue helpers, future Qdrant adapter.\n- `lib/embedding`: OpenAI client stubs, payload builders, caching (planned).\n- `lib/query`: intent parsing, hybrid planner scaffold, result formatting.\n- `lib/cli`: shared CLI glue + ingest/query subcommands.\n- `services/`: standalone executables (embedding worker, API prototype).\n\n## Service Responsibilities\n- **Query API (prototype)**: Opium HTTP service (`/query`) that parses intent, applies opening/rating filters, and returns curated responses. When `AGENT_API_KEY` is present it also invokes GPT-5 to re-rank results, add explanations/themes, and reports token usage. Future work: wire to live Postgres/Qdrant, expose metrics/health endpoints.\n- **Embedding Worker**: long-running job consumer with retry/backoff, batching, and state transitions.\n- **Background Jobs** (planned): re-embedding runs, data validation, analytics refresh pipelines.\n\n## Sequence Diagrams\n### Ingestion + Embedding\n```mermaid\nsequenceDiagram\n  participant CLI as chessmate ingest\n  participant Parser as PGN Parser\n  participant PG as PostgreSQL\n  participant Jobs as embedding_jobs\n  participant Worker as Embedding Worker\n  participant OpenAI as OpenAI API\n  participant QD as Qdrant\n\n  CLI->>Parser: parse PGN (headers, SAN, FEN)\n  Parser-->>CLI: metadata + moves\n  CLI->>PG: INSERT game/player/positions\n  CLI->>Jobs: INSERT embedding job rows\n  Worker->>Jobs: fetch pending jobs\n  Worker->>PG: mark job started\n  Worker->>OpenAI: embed FEN batch\n  OpenAI-->>Worker: vectors\n  Worker->>QD: upsert vectors + payload\n  Worker->>PG: mark job completed (vector_id)\n```\n\n### Query Prototype\n```mermaid\nsequenceDiagram\n  participant User as User/CLI\n  participant API as Query API\n  participant Intent as Query Intent\n  participant Planner as Hybrid Planner\n  participant Catalog as Openings Catalogue\n  participant Store as PostgreSQL/Qdrant (planned)\n\n  User->>API: GET/POST /query\n  API->>Intent: analyse(question)\n  Intent->>Catalog: map openings to ECO ranges\n  Catalog-->>Intent: opening slug + range\n  Intent-->>Planner: plan (filters, keywords, rating)\n  Planner->>Store: (future) fetch metadata + vectors\n  Planner-->>API: curated results (prototype dataset)\n  API-->>User: JSON response (plan + results)\n```\n\n### Embedding Job State Transitions\n```mermaid\nstateDiagram-v2\n  [*] --> Pending\n  Pending --> InProgress: worker polls job\n  InProgress --> Completed: vector stored + job updated\n  InProgress --> Failed: OpenAI/Qdrant error\n  Failed --> Pending: retry/backoff strategy\n  Completed --> [*]\n```\n\n### Module Relationships\n```mermaid\nclassDiagram\n  class Chess {\n    +Pgn_parser\n    +Game_metadata\n    +Openings\n    +Pgn_to_fen\n  }\n  class Storage {\n    +Repo_postgres\n    +Ingestion_queue\n  }\n  class Embedding {\n    +Embedding_client\n    +Embeddings_cache\n    +Vector_payload\n  }\n  class Query {\n    +Query_intent\n    +Hybrid_planner\n    +Result_formatter\n  }\n  class CLI {\n    +Ingest_command\n    +Search_command\n    +Cli_common\n  }\n  class Services {\n    +Embedding_worker\n    +Chessmate_api\n  }\n  Chess --> Storage : persist games/positions\n  Chess --> Query : opening catalogue\n  Storage --> Embedding : enqueue jobs\n  Embedding --> Storage : update vector_id\n  Query --> Storage : metadata lookups (planned)\n  Query --> Embedding : vector scoring (planned)\n  CLI --> Storage : ingest (DATABASE_URL)\n  CLI --> Services : query via HTTP API\n  Services --> Query : leverage planner modules\n```\n\n### Failure Path Example (Embedding Error)\n```mermaid\nsequenceDiagram\n  participant Worker as Embedding Worker\n  participant Jobs as embedding_jobs\n  participant PG as PostgreSQL\n  participant OpenAI as OpenAI API\n\n  Worker->>Jobs: fetch pending job\n  Worker->>PG: mark job started\n  Worker->>OpenAI: embed FEN batch\n  OpenAI-->>Worker: error response / rate limit\n  Worker->>PG: mark job failed (last_error)\n  Worker-->>Jobs: schedule retry after backoff\n```\n\n## External Integrations\n- OpenAI embeddings API (ingestion/worker).\n- Future: Qdrant live queries (HTTP/gRPC) in the planner.\n- Observability (planned): structured logging + Prometheus metrics for worker/API.\n\n## Future Enhancements\n- Replace heuristic planner with live Postgres/Qdrant hybrid search (RRF, payload filters).\n- Intent upgrades: expand opening catalogue, consider LLM-assisted classification with deterministic fallbacks.\n- Add Redis (or similar) caching for frequently asked questions / evaluation fixtures.\n- Deployment hardening: containerize API/worker, add CI integration tests, explore Kubernetes/Nomad rollouts.\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"ARCHITECTURE.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.8.25","theme":["cosmo","brand"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}